{
  "api/GraphViewBehaviorTree.BehaviorTree.html": {
    "href": "api/GraphViewBehaviorTree.BehaviorTree.html",
    "title": "Class BehaviorTree | Graph View Behavior Tree Documentation",
    "keywords": "Class BehaviorTree Behavior tree is an execution tree, requires that the Root Node be set, derived from UnityEngine.ScriptableObject Inheritance System.Object BehaviorTree Namespace : GraphViewBehaviorTree Assembly : cs.temp.dll.dll Syntax [Serializable] public class BehaviorTree : ScriptableObject Fields rootNode Declaration public Node rootNode Field Value Type Description Node The Node to start the Behavior tree. treeState Declaration public Node.State treeState Field Value Type Description Node.State The State the tree is in. Methods AddChild(Node, Node) Add a child node to the parent. Declaration public void AddChild(Node parent, Node child) Parameters Type Name Description Node parent The parent Node. Node child The Node to add to the parent. Clone() Clone the Tree. Declaration public BehaviorTree Clone() Returns Type Description BehaviorTree A Clone of the tree CreateNode(Type) Create a new Node and add it to the nodes. Declaration public Node CreateNode(Type type) Parameters Type Name Description System.Type type The Type of Node to create. Returns Type Description Node DeleteNode(Node) Delete a Node from the tree. Declaration public void DeleteNode(Node node) Parameters Type Name Description Node node The Node to Delete. GetChildren(Node) Get a list of children from the parent. Declaration public List<Node> GetChildren(Node parent) Parameters Type Name Description Node parent The node to get the children from Returns Type Description List < Node > A list of children Nodes that the parent contains. GetNodes() Declaration public List<Node> GetNodes() Returns Type Description List < Node > Get all of the Nodes in the Tree. RemoveChild(Node, Node) Remove a node from the parent. Declaration public void RemoveChild(Node parent, Node child) Parameters Type Name Description Node parent The parent Node. Node child The Node to remove from the parent. Traverse(Node, Action<Node>) Traverse the node and run the Action. Declaration public void Traverse(Node node, Action<Node> visitor) Parameters Type Name Description Node node System.Action < Node > visitor Update() Update the Tree by updating the root node. Declaration public Node.State Update() Returns Type Description Node.State The state of the tree."
  },
  "api/GraphViewBehaviorTree.BehaviorTreeRunner.html": {
    "href": "api/GraphViewBehaviorTree.BehaviorTreeRunner.html",
    "title": "Class BehaviorTreeRunner | Graph View Behavior Tree Documentation",
    "keywords": "Class BehaviorTreeRunner \"UnityEngine.MonoBehaviour\" That allows you to run a BehaviorTree in Unity. Inheritance System.Object BehaviorTreeRunner Namespace : GraphViewBehaviorTree Assembly : cs.temp.dll.dll Syntax public class BehaviorTreeRunner : MonoBehaviour Fields tree The BehaviorTree to run. Declaration public BehaviorTree tree Field Value Type Description BehaviorTree"
  },
  "api/GraphViewBehaviorTree.Editor.BehaviorTreeEditor.html": {
    "href": "api/GraphViewBehaviorTree.Editor.BehaviorTreeEditor.html",
    "title": "Class BehaviorTreeEditor | Graph View Behavior Tree Documentation",
    "keywords": "Class BehaviorTreeEditor Derive from UnityEditor.EditorWindow class to create an editor window to Edit Behavior Tree Scriptable Objects. Requires file named \"BehaviorTreeEditor.uxml\" to be in an Editor Resources Folder Uses Visual Elements requires a BehaviorTreeView an an UnityEngine.UIElements.IMGUIContainer with a name of InspectorView. Inheritance System.Object BehaviorTreeEditor Namespace : GraphViewBehaviorTree.Editor Assembly : cs.temp.dll.dll Syntax public class BehaviorTreeEditor : EditorWindow Methods OnOpenAsset(Int32, Int32) Use Unity Editor Call Back On Open Asset. Declaration public static bool OnOpenAsset(int instanceID, int line) Parameters Type Name Description System.Int32 instanceID System.Int32 line Returns Type Description System.Boolean True if this method handled the asset. Else return false. OpenTreeEditor() Adds a Entry to Window/Behavior Tree/Editor Will Open the Behavior Tree Editor to Edit Behavior Trees Declaration public static void OpenTreeEditor()"
  },
  "api/GraphViewBehaviorTree.Editor.html": {
    "href": "api/GraphViewBehaviorTree.Editor.html",
    "title": "Namespace GraphViewBehaviorTree.Editor | Graph View Behavior Tree Documentation",
    "keywords": "Namespace GraphViewBehaviorTree.Editor Classes BehaviorTreeEditor Derive from UnityEditor.EditorWindow class to create an editor window to Edit Behavior Tree Scriptable Objects. Requires file named \"BehaviorTreeEditor.uxml\" to be in an Editor Resources Folder Uses Visual Elements requires a BehaviorTreeView an an UnityEngine.UIElements.IMGUIContainer with a name of InspectorView."
  },
  "api/GraphViewBehaviorTree.Editor.Views.BehaviorTreeNodeView.html": {
    "href": "api/GraphViewBehaviorTree.Editor.Views.BehaviorTreeNodeView.html",
    "title": "Class BehaviorTreeNodeView | Graph View Behavior Tree Documentation",
    "keywords": "Class BehaviorTreeNodeView Warning Experimental: this API is experimental and might be changed or removed in the future. A View for Behavior Tree Node , derived from UnityEditor.Experimental.GraphView.Node Inheritance System.Object BehaviorTreeNodeView Namespace : GraphViewBehaviorTree.Editor.Views Assembly : cs.temp.dll.dll Syntax public class BehaviorTreeNodeView : UnityEditor.Experimental.GraphView.Node Constructors BehaviorTreeNodeView(Node) Create a New Node View. Declaration public BehaviorTreeNodeView(Node node) Parameters Type Name Description Node node Node that is associated with this view. Fields input Declaration public Port input Field Value Type Description Port The Input UnityEditor.Experimental.GraphView.Port onNodeSelected Declaration public Action<Node> onNodeSelected Field Value Type Description Action < Node > Notifies the Observers that a Node has been Selected and pass the Node that was selected. onSetRootNode Declaration public Action<Node> onSetRootNode Field Value Type Description Action < Node > Notifies Observers that the set root node has been selected. Pass the Node that was selected to be set as the root node. output Declaration public Port output Field Value Type Description Port The Output UnityEditor.Experimental.GraphView.Port . Properties node Declaration public Node node { get; } Property Value Type Description Node The Node that is associate with this view. Methods BuildContextualMenu(ContextualMenuPopulateEvent) Override UnityEditor.Experimental.GraphView.Node.BuildContextualMenu Add menu items to the node contextual menu. Declaration public override void BuildContextualMenu(ContextualMenuPopulateEvent evt) Parameters Type Name Description ContextualMenuPopulateEvent evt The ( UnityEngine.UIElements.ContextualMenuPopulateEvent ) event holding the menu to populate. OnSelected() Override UnityEditor.Experimental.GraphView.GraphElement.OnSelected Called when the GraphElement is selected. Declaration public override void OnSelected() SetPosition(Rect) Override UnityEditor.Experimental.GraphView.Node.SetPosition Set node position. Declaration public override void SetPosition(Rect newPos) Parameters Type Name Description Rect newPos UnityEngine.Rect New position. SortChildren() Sorts the Children of the GraphViewBehaviorTree.Editor.Views.BehaviorTreeNodeView.m_node if it is a CompositeNode Declaration public void SortChildren() UpdateState() Update the Node View Visual State. Also Used to Visualize the Node.State of the node when Unity is in Play Mode. Declaration public void UpdateState()"
  },
  "api/GraphViewBehaviorTree.Editor.Views.BehaviorTreeView.html": {
    "href": "api/GraphViewBehaviorTree.Editor.Views.BehaviorTreeView.html",
    "title": "Class BehaviorTreeView | Graph View Behavior Tree Documentation",
    "keywords": "Class BehaviorTreeView Warning Experimental: this API is experimental and might be changed or removed in the future. A View for the Behavior Tree, derived from UnityEditor.Experimental.GraphView.GraphView Can be used in the UI Builder. Inheritance System.Object BehaviorTreeView Namespace : GraphViewBehaviorTree.Editor.Views Assembly : cs.temp.dll.dll Syntax public class BehaviorTreeView : GraphView Constructors BehaviorTreeView() Creates a new BehaviorTreeView . Required in order to have this show up in the UI Builder Library. Declaration public BehaviorTreeView() Fields onNodeSelected Notifies the Observers that a Node has been Selected and pass the Node that was selected. Declaration public Action<Node> onNodeSelected Field Value Type Description Action < Node > Methods BuildContextualMenu(ContextualMenuPopulateEvent) Override UnityEditor.Experimental.GraphView.GraphView.BuildContextualMenu Add menu items to the contextual menu. Declaration public override void BuildContextualMenu(ContextualMenuPopulateEvent evt) Parameters Type Name Description ContextualMenuPopulateEvent evt The ( UnityEngine.UIElements.ContextualMenuPopulateEvent ) event holding the menu to populate. GetCompatiblePorts(Port, NodeAdapter) Override UnityEditor.Experimental.GraphView.GraphView.GetCompatiblePorts Get all ports compatible with given port. Declaration public override List<Port> GetCompatiblePorts(Port startPort, NodeAdapter nodeAdapter) Parameters Type Name Description Port startPort UnityEditor.Experimental.GraphView.Port Start port to validate against. NodeAdapter nodeAdapter UnityEditor.Experimental.GraphView.Port Node adapter. Returns Type Description List < Port > List of UnityEditor.Experimental.GraphView.NodeAdapter List of compatible ports. PopulateView(BehaviorTree) Populate the View with the passed in tree Declaration public void PopulateView(BehaviorTree tree) Parameters Type Name Description BehaviorTree tree The BehaviorTree to populate the View from UpdateNodeStates() Used to Update the Node State of all nodes in this tree for when Unity is in Play Mode. Declaration public void UpdateNodeStates()"
  },
  "api/GraphViewBehaviorTree.Editor.Views.BehaviorTreeView.UxmlFactory.html": {
    "href": "api/GraphViewBehaviorTree.Editor.Views.BehaviorTreeView.UxmlFactory.html",
    "title": "Class BehaviorTreeView.UxmlFactory | Graph View Behavior Tree Documentation",
    "keywords": "Class BehaviorTreeView.UxmlFactory Required in order to have BehaviorTreeView show up in the UI Builder Library. Inheritance System.Object BehaviorTreeView.UxmlFactory Namespace : GraphViewBehaviorTree.Editor.Views Assembly : cs.temp.dll.dll Syntax public class UxmlFactory : BehaviorTreeView.UxmlFactory<BehaviorTreeView, UxmlTraits>"
  },
  "api/GraphViewBehaviorTree.Editor.Views.html": {
    "href": "api/GraphViewBehaviorTree.Editor.Views.html",
    "title": "Namespace GraphViewBehaviorTree.Editor.Views | Graph View Behavior Tree Documentation",
    "keywords": "Namespace GraphViewBehaviorTree.Editor.Views Classes BehaviorTreeNodeView Warning Experimental: this API is experimental and might be changed or removed in the future. A View for Behavior Tree Node , derived from UnityEditor.Experimental.GraphView.Node BehaviorTreeView Warning Experimental: this API is experimental and might be changed or removed in the future. A View for the Behavior Tree, derived from UnityEditor.Experimental.GraphView.GraphView Can be used in the UI Builder. BehaviorTreeView.UxmlFactory Required in order to have BehaviorTreeView show up in the UI Builder Library. SplitView UnityEngine.UIElements.TwoPaneSplitView A SplitView that contains two resizable panes. One pane is fixed-size while the other pane has flex-grow style set to 1 to take all remaining space. The border between he panes is draggable to resize both panes. Both horizontal and vertical modes are supported. Requires exactly two child elements to operate. Allows you to add a split view in the UI Builder . SplitView.UxmlFactory Required in order to have SplitView show up in the UI Builder Library."
  },
  "api/GraphViewBehaviorTree.Editor.Views.SplitView.html": {
    "href": "api/GraphViewBehaviorTree.Editor.Views.SplitView.html",
    "title": "Class SplitView | Graph View Behavior Tree Documentation",
    "keywords": "Class SplitView UnityEngine.UIElements.TwoPaneSplitView A SplitView that contains two resizable panes. One pane is fixed-size while the other pane has flex-grow style set to 1 to take all remaining space. The border between he panes is draggable to resize both panes. Both horizontal and vertical modes are supported. Requires exactly two child elements to operate. Allows you to add a split view in the UI Builder . Inheritance System.Object SplitView Namespace : GraphViewBehaviorTree.Editor.Views Assembly : cs.temp.dll.dll Syntax public class SplitView : TwoPaneSplitView"
  },
  "api/GraphViewBehaviorTree.Editor.Views.SplitView.UxmlFactory.html": {
    "href": "api/GraphViewBehaviorTree.Editor.Views.SplitView.UxmlFactory.html",
    "title": "Class SplitView.UxmlFactory | Graph View Behavior Tree Documentation",
    "keywords": "Class SplitView.UxmlFactory Required in order to have SplitView show up in the UI Builder Library. Inheritance System.Object SplitView.UxmlFactory Namespace : GraphViewBehaviorTree.Editor.Views Assembly : cs.temp.dll.dll Syntax public class UxmlFactory : SplitView.UxmlFactory<SplitView, UxmlTraits>"
  },
  "api/GraphViewBehaviorTree.html": {
    "href": "api/GraphViewBehaviorTree.html",
    "title": "Namespace GraphViewBehaviorTree | Graph View Behavior Tree Documentation",
    "keywords": "Namespace GraphViewBehaviorTree Classes BehaviorTree Behavior tree is an execution tree, requires that the Root Node be set, derived from UnityEngine.ScriptableObject BehaviorTreeRunner \"UnityEngine.MonoBehaviour\" That allows you to run a BehaviorTree in Unity."
  },
  "api/GraphViewBehaviorTree.Nodes.ActionNode.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.ActionNode.html",
    "title": "Class ActionNode | Graph View Behavior Tree Documentation",
    "keywords": "Class ActionNode A Node that has no children, is the Leaf of the tree, and is where all of the logic gets implemented. The Interface, Abstract members will be implemented in the individual Action Nodes. Inheritance System.Object Node ActionNode DebugLogNode Fail WaitNode Inherited Members Node.state Node.IsStarted Node.guid Node.nodeGraphPosition Node.hasMultipleParents Node.OnStart() Node.OnStop() Node.OnUpdate() Node.AddChild(Node) Node.RemoveChild(Node) Node.GetChildren() Node.NodeReset() Node.Update() Node.Clone() Namespace : GraphViewBehaviorTree.Nodes Assembly : cs.temp.dll.dll Syntax [Serializable] public abstract class ActionNode : Node"
  },
  "api/GraphViewBehaviorTree.Nodes.CompositeNode.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.CompositeNode.html",
    "title": "Class CompositeNode | Graph View Behavior Tree Documentation",
    "keywords": "Class CompositeNode Node that has a list of children. Inheritance System.Object Node CompositeNode SequencerNode Inherited Members Node.state Node.IsStarted Node.guid Node.nodeGraphPosition Node.hasMultipleParents Node.OnStart() Node.OnStop() Node.OnUpdate() Node.NodeReset() Node.Update() Node.Clone() Namespace : GraphViewBehaviorTree.Nodes Assembly : cs.temp.dll.dll Syntax [Serializable] public abstract class CompositeNode : Node Fields children Declaration protected List<Node> children Field Value Type Description List < Node > The Children that this Node contains. Methods AddChild(Node) Add the child node to this node. Declaration public override void AddChild(Node childNode) Parameters Type Name Description Node childNode The Node to add as a Child. Overrides Node.AddChild(Node) GetChildren() Get a list of children the node contains. Declaration public override List<Node> GetChildren() Returns Type Description List < Node > A list of children Nodes. Overrides Node.GetChildren() RemoveChild(Node) Remove a Child from the Node. Declaration public override void RemoveChild(Node childNode) Parameters Type Name Description Node childNode The Child to remove. Overrides Node.RemoveChild(Node)"
  },
  "api/GraphViewBehaviorTree.Nodes.DebugLogNode.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.DebugLogNode.html",
    "title": "Class DebugLogNode | Graph View Behavior Tree Documentation",
    "keywords": "Class DebugLogNode ActionNode that logs a message. Inheritance System.Object Node ActionNode DebugLogNode Inherited Members Node.state Node.IsStarted Node.guid Node.nodeGraphPosition Node.hasMultipleParents Node.AddChild(Node) Node.RemoveChild(Node) Node.GetChildren() Node.NodeReset() Node.Update() Node.Clone() Namespace : GraphViewBehaviorTree.Nodes Assembly : cs.temp.dll.dll Syntax [Serializable] public class DebugLogNode : ActionNode Methods OnStart() Runs when the Node first starts running. Initialize the Node. Declaration protected override void OnStart() Overrides Node.OnStart() OnStop() Runs when the Node Stops. Any Cleanup that the Node may need to do. Declaration protected override void OnStop() Overrides Node.OnStop() OnUpdate() Runs every Update of the Node. Declaration protected override Node.State OnUpdate() Returns Type Description Node.State The State the Node is in once it finishes Updating. Overrides Node.OnUpdate()"
  },
  "api/GraphViewBehaviorTree.Nodes.DecoratorNode.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.DecoratorNode.html",
    "title": "Class DecoratorNode | Graph View Behavior Tree Documentation",
    "keywords": "Class DecoratorNode Node that has one child Node and is capable of augmenting the return state of it's childNode. The Interface, Abstract members will be implemented in the individual Decorator Nodes. Inheritance System.Object Node DecoratorNode DelayNode RepeatNode Inherited Members Node.state Node.IsStarted Node.guid Node.nodeGraphPosition Node.hasMultipleParents Node.OnStart() Node.OnStop() Node.OnUpdate() Node.NodeReset() Node.Update() Node.Clone() Namespace : GraphViewBehaviorTree.Nodes Assembly : cs.temp.dll.dll Syntax [Serializable] public abstract class DecoratorNode : Node Fields child Declaration protected Node child Field Value Type Description Node The Node to Augment. Methods AddChild(Node) Add the child node to this node. Declaration public override void AddChild(Node childNode) Parameters Type Name Description Node childNode The Node to add as a Child. Overrides Node.AddChild(Node) GetChildren() Get a list of children the node contains. Declaration public override List<Node> GetChildren() Returns Type Description List < Node > A list of children Nodes. Overrides Node.GetChildren() RemoveChild(Node) Remove a Child from the Node. Declaration public override void RemoveChild(Node childNode) Parameters Type Name Description Node childNode The Child to remove. Overrides Node.RemoveChild(Node)"
  },
  "api/GraphViewBehaviorTree.Nodes.DelayNode.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.DelayNode.html",
    "title": "Class DelayNode | Graph View Behavior Tree Documentation",
    "keywords": "Class DelayNode Causes a delay in operations if the delay time is set. Time To Start is Delaying before the Node Updates. (Node is Running but not Started) OnUpdate is Called after Node is Started. Time To Stop is Delaying after the Node Finishes Running. (Node is not running, and is stopping) Causes delay in started to being set to false. Inheritance System.Object Node DecoratorNode DelayNode Inherited Members DecoratorNode.child DecoratorNode.AddChild(Node) DecoratorNode.RemoveChild(Node) DecoratorNode.GetChildren() Node.state Node.IsStarted Node.guid Node.nodeGraphPosition Node.hasMultipleParents Node.Update() Node.Clone() Namespace : GraphViewBehaviorTree.Nodes Assembly : cs.temp.dll.dll Syntax public class DelayNode : DecoratorNode Methods NodeReset() Reset the Node. Calls all Nodes children to Reset. If the Node is Started calls OnStop() then sets started to false. Set the State to running. Declaration public override void NodeReset() Overrides Node.NodeReset() OnStart() Runs when the Node first starts running. Initialize the Node. Declaration protected override void OnStart() Overrides Node.OnStart() OnStop() Runs when the Node Stops. Any Cleanup that the Node may need to do. Declaration protected override void OnStop() Overrides Node.OnStop() OnUpdate() Runs every Update of the Node. Declaration protected override Node.State OnUpdate() Returns Type Description Node.State The State the Node is in once it finishes Updating. Overrides Node.OnUpdate()"
  },
  "api/GraphViewBehaviorTree.Nodes.Fail.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.Fail.html",
    "title": "Class Fail | Graph View Behavior Tree Documentation",
    "keywords": "Class Fail Inheritance System.Object Node ActionNode Fail Inherited Members Node.state Node.IsStarted Node.guid Node.nodeGraphPosition Node.hasMultipleParents Node.AddChild(Node) Node.RemoveChild(Node) Node.GetChildren() Node.NodeReset() Node.Update() Node.Clone() Namespace : GraphViewBehaviorTree.Nodes Assembly : cs.temp.dll.dll Syntax public class Fail : ActionNode Methods OnStart() Runs when the Node first starts running. Initialize the Node. Declaration protected override void OnStart() Overrides Node.OnStart() OnStop() Runs when the Node Stops. Any Cleanup that the Node may need to do. Declaration protected override void OnStop() Overrides Node.OnStop() OnUpdate() Runs every Update of the Node. Declaration protected override Node.State OnUpdate() Returns Type Description Node.State The State the Node is in once it finishes Updating. Overrides Node.OnUpdate()"
  },
  "api/GraphViewBehaviorTree.Nodes.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.html",
    "title": "Namespace GraphViewBehaviorTree.Nodes | Graph View Behavior Tree Documentation",
    "keywords": "Namespace GraphViewBehaviorTree.Nodes Classes ActionNode A Node that has no children, is the Leaf of the tree, and is where all of the logic gets implemented. The Interface, Abstract members will be implemented in the individual Action Nodes. CompositeNode Node that has a list of children. DebugLogNode ActionNode that logs a message. DecoratorNode Node that has one child Node and is capable of augmenting the return state of it's childNode. The Interface, Abstract members will be implemented in the individual Decorator Nodes. DelayNode Causes a delay in operations if the delay time is set. Time To Start is Delaying before the Node Updates. (Node is Running but not Started) OnUpdate is Called after Node is Started. Time To Stop is Delaying after the Node Finishes Running. (Node is not running, and is stopping) Causes delay in started to being set to false. Fail Node Base class for all nodes in the Behavior tree. RepeatNode DecoratorNode returns State Running Regardless of the Child Nodes State. SequencerNode CompositeNode - Runs all of the children in Sequence, by the order in the list of children. If one of the children fails the node will stop running and return failure. Returns Success if all of the children nodes Succeed. WaitNode ActionNode that waits for a period of time before returning success. Enums Node.State The states a node can be in."
  },
  "api/GraphViewBehaviorTree.Nodes.Node.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.Node.html",
    "title": "Class Node | Graph View Behavior Tree Documentation",
    "keywords": "Class Node Base class for all nodes in the Behavior tree. Inheritance System.Object Node ActionNode CompositeNode DecoratorNode Namespace : GraphViewBehaviorTree.Nodes Assembly : cs.temp.dll.dll Syntax [Serializable] public abstract class Node : ScriptableObject Fields guid Declaration public string guid Field Value Type Description System.String The GUID of the Node View, used to get the Node View that this Node is associated with. hasMultipleParents Declaration public bool hasMultipleParents Field Value Type Description System.Boolean Does this node have more then one parent. nodeGraphPosition Declaration public Vector2 nodeGraphPosition Field Value Type Description Vector2 The Position in the Behavior Tree View that this Node is at. state Declaration public Node.State state Field Value Type Description Node.State The State the Node is in. Properties IsStarted Declaration public bool IsStarted { get; protected set; } Property Value Type Description System.Boolean Has the node started. Methods AddChild(Node) Add the child node to this node. Declaration public virtual void AddChild(Node childNode) Parameters Type Name Description Node childNode The Node to add as a Child. Clone() Clone the Node. Declaration public Node Clone() Returns Type Description Node A Clone of the Node. GetChildren() Get a list of children the node contains. Declaration public virtual List<Node> GetChildren() Returns Type Description List < Node > A list of children Nodes. NodeReset() Reset the Node. Calls all Nodes children to Reset. If the Node is Started calls OnStop() then sets started to false. Set the State to running. Declaration public virtual void NodeReset() OnStart() Runs when the Node first starts running. Initialize the Node. Declaration protected abstract void OnStart() OnStop() Runs when the Node Stops. Any Cleanup that the Node may need to do. Declaration protected abstract void OnStop() OnUpdate() Runs every Update of the Node. Declaration protected abstract Node.State OnUpdate() Returns Type Description Node.State The State the Node is in once it finishes Updating. RemoveChild(Node) Remove a Child from the Node. Declaration public virtual void RemoveChild(Node childNode) Parameters Type Name Description Node childNode The Child to remove. Update() Update the Node. Declaration public Node.State Update() Returns Type Description Node.State The state that the Node is in."
  },
  "api/GraphViewBehaviorTree.Nodes.Node.State.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.Node.State.html",
    "title": "Enum Node.State | Graph View Behavior Tree Documentation",
    "keywords": "Enum Node.State The states a node can be in. Namespace : GraphViewBehaviorTree.Nodes Assembly : cs.temp.dll.dll Syntax public enum State Fields Name Description Failure The Node has completed unsuccessfully; Running The Node is Running Success The Node has completed successfully."
  },
  "api/GraphViewBehaviorTree.Nodes.RepeatNode.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.RepeatNode.html",
    "title": "Class RepeatNode | Graph View Behavior Tree Documentation",
    "keywords": "Class RepeatNode DecoratorNode returns State Running Regardless of the Child Nodes State. Inheritance System.Object Node DecoratorNode RepeatNode Inherited Members DecoratorNode.child DecoratorNode.AddChild(Node) DecoratorNode.RemoveChild(Node) DecoratorNode.GetChildren() Node.state Node.IsStarted Node.guid Node.nodeGraphPosition Node.hasMultipleParents Node.NodeReset() Node.Update() Node.Clone() Namespace : GraphViewBehaviorTree.Nodes Assembly : cs.temp.dll.dll Syntax [Serializable] public class RepeatNode : DecoratorNode Methods OnStart() Runs when the Node first starts running. Initialize the Node. Declaration protected override void OnStart() Overrides Node.OnStart() OnStop() Runs when the Node Stops. Any Cleanup that the Node may need to do. Declaration protected override void OnStop() Overrides Node.OnStop() OnUpdate() Runs every Update of the Node. Declaration protected override Node.State OnUpdate() Returns Type Description Node.State The State the Node is in once it finishes Updating. Overrides Node.OnUpdate()"
  },
  "api/GraphViewBehaviorTree.Nodes.SequencerNode.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.SequencerNode.html",
    "title": "Class SequencerNode | Graph View Behavior Tree Documentation",
    "keywords": "Class SequencerNode CompositeNode - Runs all of the children in Sequence, by the order in the list of children. If one of the children fails the node will stop running and return failure. Returns Success if all of the children nodes Succeed. Inheritance System.Object Node CompositeNode SequencerNode Inherited Members CompositeNode.children CompositeNode.AddChild(Node) CompositeNode.RemoveChild(Node) CompositeNode.GetChildren() Node.state Node.IsStarted Node.guid Node.nodeGraphPosition Node.hasMultipleParents Node.NodeReset() Node.Update() Node.Clone() Namespace : GraphViewBehaviorTree.Nodes Assembly : cs.temp.dll.dll Syntax public class SequencerNode : CompositeNode Methods OnStart() Runs when the Node first starts running. Initialize the Node. Declaration protected override void OnStart() Overrides Node.OnStart() OnStop() Runs when the Node Stops. Any Cleanup that the Node may need to do. Declaration protected override void OnStop() Overrides Node.OnStop() OnUpdate() Runs every Update of the Node. Declaration protected override Node.State OnUpdate() Returns Type Description Node.State The State the Node is in once it finishes Updating. Overrides Node.OnUpdate()"
  },
  "api/GraphViewBehaviorTree.Nodes.WaitNode.html": {
    "href": "api/GraphViewBehaviorTree.Nodes.WaitNode.html",
    "title": "Class WaitNode | Graph View Behavior Tree Documentation",
    "keywords": "Class WaitNode ActionNode that waits for a period of time before returning success. Inheritance System.Object Node ActionNode WaitNode Inherited Members Node.state Node.IsStarted Node.guid Node.nodeGraphPosition Node.hasMultipleParents Node.AddChild(Node) Node.RemoveChild(Node) Node.GetChildren() Node.NodeReset() Node.Update() Node.Clone() Namespace : GraphViewBehaviorTree.Nodes Assembly : cs.temp.dll.dll Syntax [Serializable] public class WaitNode : ActionNode Methods OnStart() Runs when the Node first starts running. Initialize the Node. Declaration protected override void OnStart() Overrides Node.OnStart() OnStop() Runs when the Node Stops. Any Cleanup that the Node may need to do. Declaration protected override void OnStop() Overrides Node.OnStop() OnUpdate() Runs every Update of the Node. Declaration protected override Node.State OnUpdate() Returns Type Description Node.State The State the Node is in once it finishes Updating. Overrides Node.OnUpdate()"
  },
  "articles/CHANGELOG.html": {
    "href": "articles/CHANGELOG.html",
    "title": "| Graph View Behavior Tree Documentation",
    "keywords": "Hash: 277a853 Date: 2022-05-04 Message: Initial Commit. Hash: d3c2bb8 Date: 2022-05-05 Message: Created Abstract Node Scriptable Object. Hash: 3431f9f Date: 2022-05-05 Message: Added Summaries to Node for auto documentation. Hash: 873dde4 Date: 2022-05-05 Message: Behavior Tree Created. Hash: de54b5d Date: 2022-05-05 Message: Action Node Created. Hash: 5174c06 Date: 2022-05-05 Message: Decorator Node Created. Hash: 1ae13db Date: 2022-05-13 Message: Composite Node Added Hash: 425ffe1 Date: 2022-05-13 Message: Fixed Tree so it does not Continue to run forever. Hash: 60f23b5 Date: 2022-05-13 Message: Corrected the State so the nodes state does not have to be public. Hash: 2161e24 Date: 2022-05-13 Message: First Action Node - Debug Log Node Created Hash: 7216b30 Date: 2022-05-13 Message: Behavior Tree Runner Created Hash: e3f0a6d Date: 2022-05-13 Message: Created A Folder to store all the Action Nodes Hash: 0206f4e Date: 2022-05-13 Message: First Decorator Node - Repeat Node Created Hash: 615be2e Date: 2022-05-13 Message: First Composite Node - Sequence Node Created Hash: 7326865 Date: 2022-05-14 Message: Action Node - Wait Node Created"
  },
  "articles/LICENSE.html": {
    "href": "articles/LICENSE.html",
    "title": "MIT License | Graph View Behavior Tree Documentation",
    "keywords": "MIT License Copyright (c) 2021 James LaFritz Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "articles/README.html": {
    "href": "articles/README.html",
    "title": "Table of Contents | Graph View Behavior Tree Documentation",
    "keywords": "<!-- Header --> <!--<h3 align=\"center\">Project Title</h3>--> <!--<h2 align=\"center\">Project Description</h2>--> ' Report Bug · Request Feature <!-- PROJECT SHIELDS --> <!-- Links --> <!-- PROJECT LOGO --> <!-- TABLE OF CONTENTS --> Table of Contents About The Project Node Types Decorator Node Composite Node Action Node Built With Articles License Acknowledgements <!-- ABOUT THE PROJECT --> About The Project I had code on sitting around on my hard drive for a Behavior Tree Editor That inspired me to create a bBehavior Tree Editor and write Articles about Behavior Tree and Using the Unity Editor UI Builder. It has been Pointed Out to me very polite and professional that this code is actually from the KIWI Coder. Behavior Tree using UI Builder, GraphView, and Scriptable Objects in Unity 2021.3 This can be used as a template to build any type on Node Based Editor in Unity. i.e Dialog System or an AI Behavior Tree. If using for AI Behavior tree I would probably use Single Input Ports not Multiple. Even though the Nodes themselves are Scriptable Objects this can be changed and there is nothing that states that you have to use Scriptable Objects as the type for the nodes, this was just a decision that I made as it is easier to Bing the properties off the Node. Also there is nothing sating that the Nodes have to be stored in the Asset itself as I have done. Behavior Tree is an execution tree (uses the Strategy pattern ) and always starts with a Root Node. This will be so that the behavior tree knows where to start. Root Node has only one child. Now there are 3 basic main type of nodes Decorator, Composite Node and Action Node. Each Node can return one of three states Running, Success, or Failure. All nodes will be saved in Unity as Scriptable Objects. A Behavior tree will be a Scriptable Object containing all the Nodes in it. Decorator Node Has one child and is capable of augmenting the return state of it's child. This uses the Decorator pattern . Composite Node Has a list of children and is the control flow of the behavior tree like switch statements and for loops. There are 2 types Composite Nodes the Selector and Sequence. This uses the Composite pattern . Action Node The Leaf of the tree, has no children, and is where all of the logic gets implemented. Built With <!-- Installation --> Installation To install this into your project for modifications Clone or Download the code from Git Hub into the Asset Folder of your project. Change the Folder From GraphView Behavior Tree to mach what you wold like. Edit all Files and change the NameSpace to match your new Folder Name. Do Not forget to change this in the UXML Documents as well. i.e \"GraphViewBehaviorTree.Editor.SplitView\" Delete the Runtime/james.lafritz.GraphViewBehaviorTree and Editor/james.lafritz.GraphViewBehaviorTree.Editor Assembly Definition Files, Or Edit/Replace them with your own. To use Template as is Use the Package manager to Install package from Git Hub. see Creating custom packages for use in Unity In Unity open the package manager Go to Window->PackageManager Install this Package from git url Click the Plus Drop down Select \"add package from git URL\" https://github.com/JamesLaFritz/GraphViewBehaviorTree.git Select add <!-- Articles --> Articles Behavior Trees In Unity Using Unity’s UI Builder: Basic Set Up Using Unity’s UI Builder: Serialized Object data binding <!-- ROADMAP --> Roadmap See the open issues for a list of proposed features (and known issues). <!-- LICENSE --> License Distributed under the MIT License. See LICENSE for more information. <!-- ACKNOWLEDGEMENTS --> Acknowledgements <!-- Repo Card Exclusive Options: show_owner - Show the repo's owner name (boolean) Common Options: title_color - Card's title color (hex color) text_color - Body text color (hex color) icon_color - Icons color if available (hex color) border_color - Card's border color (hex color). (Does not apply when hide_border is enabled) bg_color - Card's background color (hex color) or a gradient in the form of angle,start,end hide_border - Hides the card's border (boolean) theme - name of the theme, choose from all available themes cache_seconds - set the cache header manually (min: 1800, max: 86400) locale - set the language in the card (e.g. cn, de, es, etc.) border_radius - Corner rounding on the card_ Gradient in bg_color You can provide multiple comma-separated values in bg_color option to render a gradient, the format of the gradient is :- &bg_color=DEG,COLOR1,COLOR2,COLOR3...COLOR10 Avaliable Repo Card Themes default_repocard dark radical merko gruvbox tokyonight onedark cobalt synthwave highcontrast dracula prussian monokai vue vue-dark shades-of-purple nightowl buefy blue-green algolia great-gatsby darcula bear solarized-dark solarized-light chartreuse-dark nord gotham material-palenight graywhite vision-friendly-dark ayu-mirage midnight-purple calm flag-india omni react jolly maroongold yeblu blueberry slateorange kacho_ga outrun -->"
  },
  "articles/Third Party Notices.html": {
    "href": "articles/Third Party Notices.html",
    "title": "Third Party Notice | Graph View Behavior Tree Documentation",
    "keywords": "Third Party Notice This package contains third-party software components governed by the license(s) indicated below:"
  }
}