### YamlMime:ManagedReference
items:
- uid: GraphViewBehaviorTree.BehaviorTree
  commentId: T:GraphViewBehaviorTree.BehaviorTree
  id: BehaviorTree
  parent: GraphViewBehaviorTree
  children:
  - GraphViewBehaviorTree.BehaviorTree.AddChild(GraphViewBehaviorTree.Nodes.Node,GraphViewBehaviorTree.Nodes.Node)
  - GraphViewBehaviorTree.BehaviorTree.Clone
  - GraphViewBehaviorTree.BehaviorTree.CreateNode(System.Type)
  - GraphViewBehaviorTree.BehaviorTree.DeleteNode(GraphViewBehaviorTree.Nodes.Node)
  - GraphViewBehaviorTree.BehaviorTree.GetChildren(GraphViewBehaviorTree.Nodes.Node)
  - GraphViewBehaviorTree.BehaviorTree.GetNodes
  - GraphViewBehaviorTree.BehaviorTree.RemoveChild(GraphViewBehaviorTree.Nodes.Node,GraphViewBehaviorTree.Nodes.Node)
  - GraphViewBehaviorTree.BehaviorTree.rootNode
  - GraphViewBehaviorTree.BehaviorTree.Traverse(GraphViewBehaviorTree.Nodes.Node,System.Action{GraphViewBehaviorTree.Nodes.Node})
  - GraphViewBehaviorTree.BehaviorTree.treeState
  - GraphViewBehaviorTree.BehaviorTree.Update
  langs:
  - csharp
  - vb
  name: BehaviorTree
  nameWithType: BehaviorTree
  fullName: GraphViewBehaviorTree.BehaviorTree
  type: Class
  source:
    id: BehaviorTree
    path: ''
    startLine: 723
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  summary: "\nBehavior tree is an execution tree, requires that the Root Node be set, derived from <a hfref=\"https://docs.unity3d.com/2021.3/Documentation/ScriptReference/ScriptableObject.html\">UnityEngine.ScriptableObject</a>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class BehaviorTree : ScriptableObject
    content.vb: >-
      <Serializable>

      Public Class BehaviorTree
          Inherits ScriptableObject
  inheritance:
  - System.Object
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GraphViewBehaviorTree.BehaviorTree.rootNode
  commentId: F:GraphViewBehaviorTree.BehaviorTree.rootNode
  id: rootNode
  parent: GraphViewBehaviorTree.BehaviorTree
  langs:
  - csharp
  - vb
  name: rootNode
  nameWithType: BehaviorTree.rootNode
  fullName: GraphViewBehaviorTree.BehaviorTree.rootNode
  type: Field
  source:
    id: rootNode
    path: ''
    startLine: 730
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  example: []
  syntax:
    content: public Node rootNode
    return:
      type: GraphViewBehaviorTree.Nodes.Node
      description: "\nThe Node to start the Behavior tree.\n"
    content.vb: Public rootNode As Node
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GraphViewBehaviorTree.BehaviorTree.treeState
  commentId: F:GraphViewBehaviorTree.BehaviorTree.treeState
  id: treeState
  parent: GraphViewBehaviorTree.BehaviorTree
  langs:
  - csharp
  - vb
  name: treeState
  nameWithType: BehaviorTree.treeState
  fullName: GraphViewBehaviorTree.BehaviorTree.treeState
  type: Field
  source:
    id: treeState
    path: ''
    startLine: 735
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  example: []
  syntax:
    content: public Node.State treeState
    return:
      type: GraphViewBehaviorTree.Nodes.Node.State
      description: "\nThe State the tree is in.\n"
    content.vb: Public treeState As Node.State
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GraphViewBehaviorTree.BehaviorTree.GetNodes
  commentId: M:GraphViewBehaviorTree.BehaviorTree.GetNodes
  id: GetNodes
  parent: GraphViewBehaviorTree.BehaviorTree
  langs:
  - csharp
  - vb
  name: GetNodes()
  nameWithType: BehaviorTree.GetNodes()
  fullName: GraphViewBehaviorTree.BehaviorTree.GetNodes()
  type: Method
  source:
    id: GetNodes
    path: ''
    startLine: 745
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  example: []
  syntax:
    content: public List<Node> GetNodes()
    return:
      type: List{GraphViewBehaviorTree.Nodes.Node}
      description: "\nGet all of the Nodes in the Tree.\n"
    content.vb: Public Function GetNodes As List(Of Node)
  overload: GraphViewBehaviorTree.BehaviorTree.GetNodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GraphViewBehaviorTree.BehaviorTree.Update
  commentId: M:GraphViewBehaviorTree.BehaviorTree.Update
  id: Update
  parent: GraphViewBehaviorTree.BehaviorTree
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: BehaviorTree.Update()
  fullName: GraphViewBehaviorTree.BehaviorTree.Update()
  type: Method
  source:
    id: Update
    path: ''
    startLine: 759
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  summary: "\nUpdate the Tree by updating the root node.\n"
  example: []
  syntax:
    content: public Node.State Update()
    return:
      type: GraphViewBehaviorTree.Nodes.Node.State
      description: The state of the tree.
    content.vb: Public Function Update As Node.State
  overload: GraphViewBehaviorTree.BehaviorTree.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GraphViewBehaviorTree.BehaviorTree.CreateNode(System.Type)
  commentId: M:GraphViewBehaviorTree.BehaviorTree.CreateNode(System.Type)
  id: CreateNode(System.Type)
  parent: GraphViewBehaviorTree.BehaviorTree
  langs:
  - csharp
  - vb
  name: CreateNode(Type)
  nameWithType: BehaviorTree.CreateNode(Type)
  fullName: GraphViewBehaviorTree.BehaviorTree.CreateNode(System.Type)
  type: Method
  source:
    id: CreateNode
    path: ''
    startLine: 788
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  summary: "\nCreate a new Node and add it to the nodes.\n"
  example: []
  syntax:
    content: public Node CreateNode(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The Type of Node to create.
    return:
      type: GraphViewBehaviorTree.Nodes.Node
    content.vb: Public Function CreateNode(type As Type) As Node
  overload: GraphViewBehaviorTree.BehaviorTree.CreateNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GraphViewBehaviorTree.BehaviorTree.DeleteNode(GraphViewBehaviorTree.Nodes.Node)
  commentId: M:GraphViewBehaviorTree.BehaviorTree.DeleteNode(GraphViewBehaviorTree.Nodes.Node)
  id: DeleteNode(GraphViewBehaviorTree.Nodes.Node)
  parent: GraphViewBehaviorTree.BehaviorTree
  langs:
  - csharp
  - vb
  name: DeleteNode(Node)
  nameWithType: BehaviorTree.DeleteNode(Node)
  fullName: GraphViewBehaviorTree.BehaviorTree.DeleteNode(GraphViewBehaviorTree.Nodes.Node)
  type: Method
  source:
    id: DeleteNode
    path: ''
    startLine: 806
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  summary: "\nDelete a Node from the tree.\n"
  example: []
  syntax:
    content: public void DeleteNode(Node node)
    parameters:
    - id: node
      type: GraphViewBehaviorTree.Nodes.Node
      description: The Node to Delete.
    content.vb: Public Sub DeleteNode(node As Node)
  overload: GraphViewBehaviorTree.BehaviorTree.DeleteNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GraphViewBehaviorTree.BehaviorTree.AddChild(GraphViewBehaviorTree.Nodes.Node,GraphViewBehaviorTree.Nodes.Node)
  commentId: M:GraphViewBehaviorTree.BehaviorTree.AddChild(GraphViewBehaviorTree.Nodes.Node,GraphViewBehaviorTree.Nodes.Node)
  id: AddChild(GraphViewBehaviorTree.Nodes.Node,GraphViewBehaviorTree.Nodes.Node)
  parent: GraphViewBehaviorTree.BehaviorTree
  langs:
  - csharp
  - vb
  name: AddChild(Node, Node)
  nameWithType: BehaviorTree.AddChild(Node, Node)
  fullName: GraphViewBehaviorTree.BehaviorTree.AddChild(GraphViewBehaviorTree.Nodes.Node, GraphViewBehaviorTree.Nodes.Node)
  type: Method
  source:
    id: AddChild
    path: ''
    startLine: 826
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  summary: "\nAdd a child node to the parent.\n"
  example: []
  syntax:
    content: public void AddChild(Node parent, Node child)
    parameters:
    - id: parent
      type: GraphViewBehaviorTree.Nodes.Node
      description: The parent Node.
    - id: child
      type: GraphViewBehaviorTree.Nodes.Node
      description: The Node to add to the parent.
    content.vb: Public Sub AddChild(parent As Node, child As Node)
  overload: GraphViewBehaviorTree.BehaviorTree.AddChild*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GraphViewBehaviorTree.BehaviorTree.RemoveChild(GraphViewBehaviorTree.Nodes.Node,GraphViewBehaviorTree.Nodes.Node)
  commentId: M:GraphViewBehaviorTree.BehaviorTree.RemoveChild(GraphViewBehaviorTree.Nodes.Node,GraphViewBehaviorTree.Nodes.Node)
  id: RemoveChild(GraphViewBehaviorTree.Nodes.Node,GraphViewBehaviorTree.Nodes.Node)
  parent: GraphViewBehaviorTree.BehaviorTree
  langs:
  - csharp
  - vb
  name: RemoveChild(Node, Node)
  nameWithType: BehaviorTree.RemoveChild(Node, Node)
  fullName: GraphViewBehaviorTree.BehaviorTree.RemoveChild(GraphViewBehaviorTree.Nodes.Node, GraphViewBehaviorTree.Nodes.Node)
  type: Method
  source:
    id: RemoveChild
    path: ''
    startLine: 842
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  summary: "\nRemove a node from the parent.\n"
  example: []
  syntax:
    content: public void RemoveChild(Node parent, Node child)
    parameters:
    - id: parent
      type: GraphViewBehaviorTree.Nodes.Node
      description: The parent Node.
    - id: child
      type: GraphViewBehaviorTree.Nodes.Node
      description: The Node to remove from the parent.
    content.vb: Public Sub RemoveChild(parent As Node, child As Node)
  overload: GraphViewBehaviorTree.BehaviorTree.RemoveChild*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GraphViewBehaviorTree.BehaviorTree.GetChildren(GraphViewBehaviorTree.Nodes.Node)
  commentId: M:GraphViewBehaviorTree.BehaviorTree.GetChildren(GraphViewBehaviorTree.Nodes.Node)
  id: GetChildren(GraphViewBehaviorTree.Nodes.Node)
  parent: GraphViewBehaviorTree.BehaviorTree
  langs:
  - csharp
  - vb
  name: GetChildren(Node)
  nameWithType: BehaviorTree.GetChildren(Node)
  fullName: GraphViewBehaviorTree.BehaviorTree.GetChildren(GraphViewBehaviorTree.Nodes.Node)
  type: Method
  source:
    id: GetChildren
    path: ''
    startLine: 854
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  summary: "\nGet a list of children from the parent.\n"
  example: []
  syntax:
    content: public List<Node> GetChildren(Node parent)
    parameters:
    - id: parent
      type: GraphViewBehaviorTree.Nodes.Node
      description: The node to get the children from
    return:
      type: List{GraphViewBehaviorTree.Nodes.Node}
      description: A list of children Nodes that the parent contains.
    content.vb: Public Function GetChildren(parent As Node) As List(Of Node)
  overload: GraphViewBehaviorTree.BehaviorTree.GetChildren*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GraphViewBehaviorTree.BehaviorTree.Traverse(GraphViewBehaviorTree.Nodes.Node,System.Action{GraphViewBehaviorTree.Nodes.Node})
  commentId: M:GraphViewBehaviorTree.BehaviorTree.Traverse(GraphViewBehaviorTree.Nodes.Node,System.Action{GraphViewBehaviorTree.Nodes.Node})
  id: Traverse(GraphViewBehaviorTree.Nodes.Node,System.Action{GraphViewBehaviorTree.Nodes.Node})
  parent: GraphViewBehaviorTree.BehaviorTree
  langs:
  - csharp
  - vb
  name: Traverse(Node, Action<Node>)
  nameWithType: BehaviorTree.Traverse(Node, Action<Node>)
  fullName: GraphViewBehaviorTree.BehaviorTree.Traverse(GraphViewBehaviorTree.Nodes.Node, System.Action<GraphViewBehaviorTree.Nodes.Node>)
  type: Method
  source:
    id: Traverse
    path: ''
    startLine: 864
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  summary: "\nTraverse the node and run the Action.\n"
  example: []
  syntax:
    content: public void Traverse(Node node, Action<Node> visitor)
    parameters:
    - id: node
      type: GraphViewBehaviorTree.Nodes.Node
    - id: visitor
      type: System.Action{GraphViewBehaviorTree.Nodes.Node}
    content.vb: Public Sub Traverse(node As Node, visitor As Action(Of Node))
  overload: GraphViewBehaviorTree.BehaviorTree.Traverse*
  nameWithType.vb: BehaviorTree.Traverse(Node, Action(Of Node))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GraphViewBehaviorTree.BehaviorTree.Traverse(GraphViewBehaviorTree.Nodes.Node, System.Action(Of GraphViewBehaviorTree.Nodes.Node))
  name.vb: Traverse(Node, Action(Of Node))
- uid: GraphViewBehaviorTree.BehaviorTree.Clone
  commentId: M:GraphViewBehaviorTree.BehaviorTree.Clone
  id: Clone
  parent: GraphViewBehaviorTree.BehaviorTree
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: BehaviorTree.Clone()
  fullName: GraphViewBehaviorTree.BehaviorTree.Clone()
  type: Method
  source:
    id: Clone
    path: ''
    startLine: 875
  assemblies:
  - cs.temp.dll
  namespace: GraphViewBehaviorTree
  summary: "\nClone the Tree.\n"
  example: []
  syntax:
    content: public BehaviorTree Clone()
    return:
      type: GraphViewBehaviorTree.BehaviorTree
      description: A Clone of the tree
    content.vb: Public Function Clone As BehaviorTree
  overload: GraphViewBehaviorTree.BehaviorTree.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: GraphViewBehaviorTree
  commentId: N:GraphViewBehaviorTree
  name: GraphViewBehaviorTree
  nameWithType: GraphViewBehaviorTree
  fullName: GraphViewBehaviorTree
- uid: GraphViewBehaviorTree.Nodes.Node
  commentId: T:GraphViewBehaviorTree.Nodes.Node
  parent: GraphViewBehaviorTree.Nodes
  name: Node
  nameWithType: Node
  fullName: GraphViewBehaviorTree.Nodes.Node
- uid: GraphViewBehaviorTree.Nodes
  commentId: N:GraphViewBehaviorTree.Nodes
  name: GraphViewBehaviorTree.Nodes
  nameWithType: GraphViewBehaviorTree.Nodes
  fullName: GraphViewBehaviorTree.Nodes
- uid: GraphViewBehaviorTree.Nodes.Node.State
  commentId: T:GraphViewBehaviorTree.Nodes.Node.State
  parent: GraphViewBehaviorTree.Nodes
  name: Node.State
  nameWithType: Node.State
  fullName: GraphViewBehaviorTree.Nodes.Node.State
- uid: GraphViewBehaviorTree.BehaviorTree.GetNodes*
  commentId: Overload:GraphViewBehaviorTree.BehaviorTree.GetNodes
  name: GetNodes
  nameWithType: BehaviorTree.GetNodes
  fullName: GraphViewBehaviorTree.BehaviorTree.GetNodes
- uid: List{GraphViewBehaviorTree.Nodes.Node}
  commentId: '!:List{GraphViewBehaviorTree.Nodes.Node}'
  definition: List`1
  name: List<Node>
  nameWithType: List<Node>
  fullName: List<GraphViewBehaviorTree.Nodes.Node>
  nameWithType.vb: List(Of Node)
  fullName.vb: List(Of GraphViewBehaviorTree.Nodes.Node)
  name.vb: List(Of Node)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GraphViewBehaviorTree.Nodes.Node
    name: Node
    nameWithType: Node
    fullName: GraphViewBehaviorTree.Nodes.Node
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GraphViewBehaviorTree.Nodes.Node
    name: Node
    nameWithType: Node
    fullName: GraphViewBehaviorTree.Nodes.Node
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: GraphViewBehaviorTree.BehaviorTree.Update*
  commentId: Overload:GraphViewBehaviorTree.BehaviorTree.Update
  name: Update
  nameWithType: BehaviorTree.Update
  fullName: GraphViewBehaviorTree.BehaviorTree.Update
- uid: GraphViewBehaviorTree.BehaviorTree.CreateNode*
  commentId: Overload:GraphViewBehaviorTree.BehaviorTree.CreateNode
  name: CreateNode
  nameWithType: BehaviorTree.CreateNode
  fullName: GraphViewBehaviorTree.BehaviorTree.CreateNode
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GraphViewBehaviorTree.BehaviorTree.DeleteNode*
  commentId: Overload:GraphViewBehaviorTree.BehaviorTree.DeleteNode
  name: DeleteNode
  nameWithType: BehaviorTree.DeleteNode
  fullName: GraphViewBehaviorTree.BehaviorTree.DeleteNode
- uid: GraphViewBehaviorTree.BehaviorTree.AddChild*
  commentId: Overload:GraphViewBehaviorTree.BehaviorTree.AddChild
  name: AddChild
  nameWithType: BehaviorTree.AddChild
  fullName: GraphViewBehaviorTree.BehaviorTree.AddChild
- uid: GraphViewBehaviorTree.BehaviorTree.RemoveChild*
  commentId: Overload:GraphViewBehaviorTree.BehaviorTree.RemoveChild
  name: RemoveChild
  nameWithType: BehaviorTree.RemoveChild
  fullName: GraphViewBehaviorTree.BehaviorTree.RemoveChild
- uid: GraphViewBehaviorTree.BehaviorTree.GetChildren*
  commentId: Overload:GraphViewBehaviorTree.BehaviorTree.GetChildren
  name: GetChildren
  nameWithType: BehaviorTree.GetChildren
  fullName: GraphViewBehaviorTree.BehaviorTree.GetChildren
- uid: GraphViewBehaviorTree.BehaviorTree.Traverse*
  commentId: Overload:GraphViewBehaviorTree.BehaviorTree.Traverse
  name: Traverse
  nameWithType: BehaviorTree.Traverse
  fullName: GraphViewBehaviorTree.BehaviorTree.Traverse
- uid: System.Action{GraphViewBehaviorTree.Nodes.Node}
  commentId: T:System.Action{GraphViewBehaviorTree.Nodes.Node}
  parent: System
  definition: System.Action`1
  name: Action<Node>
  nameWithType: Action<Node>
  fullName: System.Action<GraphViewBehaviorTree.Nodes.Node>
  nameWithType.vb: Action(Of Node)
  fullName.vb: System.Action(Of GraphViewBehaviorTree.Nodes.Node)
  name.vb: Action(Of Node)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GraphViewBehaviorTree.Nodes.Node
    name: Node
    nameWithType: Node
    fullName: GraphViewBehaviorTree.Nodes.Node
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GraphViewBehaviorTree.Nodes.Node
    name: Node
    nameWithType: Node
    fullName: GraphViewBehaviorTree.Nodes.Node
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GraphViewBehaviorTree.BehaviorTree.Clone*
  commentId: Overload:GraphViewBehaviorTree.BehaviorTree.Clone
  name: Clone
  nameWithType: BehaviorTree.Clone
  fullName: GraphViewBehaviorTree.BehaviorTree.Clone
- uid: GraphViewBehaviorTree.BehaviorTree
  commentId: T:GraphViewBehaviorTree.BehaviorTree
  parent: GraphViewBehaviorTree
  name: BehaviorTree
  nameWithType: BehaviorTree
  fullName: GraphViewBehaviorTree.BehaviorTree
